# Debug message
#{{{
snippet log
	echo('['.__class__.':'.__function__.':'.__line__.']${1}:'."${0:$1}\n");
snippet logBr
	echo('['.__class__.':'.__function__.':'.__line__.']${1}:'."${0:$1}<br />");
snippet logFile
	file_put_contents('/tmp/sniplog', '<'.date(Y-m-d h:i:s).'>['.__class__.':'.__function__.':'.__line__.']${1}:'."${0:$1}\n",FILE_APPEND|LOCK_EX);
snippet pd
	echo('<pre>');var_dump(${0});echo('</pre>');
snippet pdd
	echo('<pre>');var_dump(${0});echo('</pre>');exit(0);
snippet vd
	var_dump(${0});
snippet vdd
	var_dump(${0});exit(0);
#}}}
# Reserved word
#{{{
snippet C
	$_COOKIE['${1:variable}']
snippet E
	$_ENV['${1:variable}']
snippet F
	$_FILES['${1:variable}']
snippet G
	$_GET['${1:variable}']
snippet P
	$_POST['${1:variable}']
snippet R
	$_REQUEST['${1:variable}']
snippet S
	$_SERVER['${1:variable}']
snippet SS
	$_SESSION['${1:variable}']
#}}}
# Method
#{{{
snippet inc
	include '${0:file}';
snippet inc1
	include_once '${0:file}';
snippet req
	require '${0:file}';
snippet req1
	require_once '${0:file}';
snippet def
	define('${1}'${0});
#}}}
# Start Docblock
#{{{
snippet /*
	/**
	 * ${0}
	 */
#}}}
# Visibility
#{{{
snippet public
    public ${0:static}
snippet protected
    protected ${0:static}
snippet private
    private ${0:static}
#}}}
# Class
#{{{
snippet class
	/**
	 * ${1}
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		// Class valiable
		//{{{
		${3:valiable}
		//}}}
		/**
		 * ${4}
		 */
		public function __construct(${5:argument}) //{{{
		{
			${0}
		} //}}}
	}
#}}}
# Function
#{{{
snippet function_public
	/**
	 * ${1}
	 */
	public${2:static} function ${3}(${4}) //{{{
	{
		${0}
	} //}}}
snippet function_protected
	/**
	 * ${1}
	 */
	protected${2:static} function ${3}(${4}) //{{{
	{
		${0}
	} //}}}
snippet function_private
	/**
	 * ${1}
	 */
	private${2: static} function _${3}(${4}) //{{{
	{
		${0}
	} //}}}
snippet setter
	${1:public} function set${2}(${3:$2}) { $this->${0:$3} = $3; }
snippet getter
	${1:public} function get${2}() { return $this->${0:$2}; }
#}}}
# PHP tags
#{{{
snippet <?
	<?php

	${0}
snippet <?=
	<?= ${0} ?>
#}}}
# foreach
#{{{
snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${0}
	}
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${0}
	}
#}}}
# for
#{{{
snippet for
	for ($${1:valiable} = 0; $$1 < ${2:max}; $$1${3:++}) {
		${0}
	}
#}}}
# while
#{{{
snippet while
	while (${1:/* condition */}) {
		${0}
	}
#}}}
# if
#{{{
snippet if
	if (${1:/* condition */}) {
		${0}
	}
snippet else
	else {
		${0}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${0}
	}
#}}}
# switch
#{{{
snippet switch
	switch ($${1:variable}) {
	case '${2:value}':
		${3}
		break;
	${0}
	default:
		${4}
		break;
	}
snippet case
	case '${1:value}':
		${0}
		break;
#}}}
# try
#{{{
snippet try
	try {
		${0}
	} catch (${1:Exception} $e) {
	} finally {
	}
#}}}
# array
#{{{
snippet array
	$${1:arrayName} = array(
		'${2}' => ${0},);
#}}}
# phpunit
#{{{
snippet ase
	$this->assertEquals(${1:expected}, ${2:actual});
snippet asne
	$this->assertNotEquals(${1:expected}, ${2:actual});
snippet asf
	$this->assertFalse(${1:Something});
snippet ast
	$this->assertTrue(${1:Something});
snippet asfex
	$this->assertFileExists(${1:path/to/file});
snippet asfnex
	$this->assertFileNotExists(${1:path/to/file});
snippet ascon
	$this->assertContains(${1:Search Value}, ${2:Array or Iterator});
snippet ashk
	$this->assertArrayHasKey(${1:key}, ${2:array});
snippet asnhk
	this->assertArrayNotHasKey(${1:value}, ${2:array});
snippet ascha
	$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');
snippet asi
	$this->assertInstanceOf(${1:expected}, ${2:actual});
snippet tc
	public function test${1:name_of_the_test}() //{{{
	{
		${0:code}
	} //}}}
#}}}
