# Debug message
#{{{
snippet log
	echo('['.__class__.':'.__function__.':'.__line__.']${1}:'."$${0:$1}\n");
snippet logBr
	echo('['.__class__.':'.__function__.':'.__line__.']${1}:'."$${0:$1}<br />");
snippet logFile
	file_put_contents('/tmp/sniplog', '<'.date(Y-m-d h:i:s).'>['.__class__.':'.__function__.':'.__line__.']${1}:'."$${0:$1}\n",FILE_APPEND|LOCK_EX);
snippet pd
	echo('<pre>');var_dump($${0});echo('</pre>');
snippet pdd
	echo('<pre>');var_dump($${0});echo('</pre>');exit(0);
snippet vd
	var_dump($${0});
snippet vdd
	var_dump($${0});exit(0);
#}}}
# Reserved word
#{{{
snippet C
	$_COOKIE['${0}']
snippet E
	$_ENV['${0}']
snippet F
	$_FILES['${0}']
snippet G
	$_GET['${0}']
snippet P
	$_POST['${0}']
snippet R
	$_REQUEST['${0}']
snippet S
	$_SERVER['${0}']
snippet SS
	$_SESSION['${0}']
#}}}
# Method
#{{{
snippet inc
	include('${0}');
snippet inc1
	include_once('${0}');
snippet req
	require('${0}');
snippet req1
	require_once('${0}');
snippet def
	define('${1}', ${0});
#}}}
# Start Docblock
#{{{
snippet /*
	/**
	 * ${0}
	 */
#}}}
# Visibility
#{{{
snippet public
	public ${1:static} ${0}
snippet protected
	protected ${1:static} ${0}
snippet private
	private ${1:static} ${0}
#}}}
# Class
#{{{
snippet class
	/**
	 * ${1}
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		// Class valiable
		//{{{
		${3}
		//}}}
		/**
		 * ${4}
		 */
		public function __construct(${5}) //{{{
		{
			${0}
		} //}}}
	}
#}}}
# Function
#{{{
snippet function_public
	/**
	 * ${1}
	 */
	public ${2:static }function ${3}(${4}) //{{{
	{
		${0}
	} //}}}
snippet function_protected
	/**
	 * ${1}
	 */
	protected ${2:static }function ${3}(${4}) //{{{
	{
		${0}
	} //}}}
snippet function_private
	/**
	 * ${1}
	 */
	private ${2:static }function _${3}(${4}) //{{{
	{
		${0}
	} //}}}
snippet setter
	public function set${1}($${2:$1}) { $this->${3:_$2} = $$2; }
	${0}
snippet getter
	public function get${1}() { return $this->${2:_$1}; }
	${0}
snippet sgetter
	public function set${1}($${2:$1}) { $this->${3:_$2} = $$2; }
	public function get$1() { return $this->$3; }
	${0}
#}}}
# PHP tags
#{{{
snippet <?
	<?php

	${0}
snippet <?=
	<?= ${0} ?>
#}}}
# foreach
#{{{
snippet foreach
	foreach ($${1} as $${2}) {
		${0}
	}
snippet foreachk
	foreach ($${1} as $${2:key} => $${3}) {
		${0}
	}
#}}}
# for
#{{{
snippet for
	for ($${1} = 0; $$1 < ${2}; $$1${3:++}) {
		${0}
	}
#}}}
# while
#{{{
snippet while
	while (${1}) {
		${0}
	}
#}}}
# if
#{{{
snippet if
	if (${1}) {
		${0}
	}
snippet else
	else {
		${0}
	}
snippet elseif
	elseif (${1}) {
		${0}
	}
#}}}
# switch
#{{{
snippet switch
	switch ($${1}) {
	case '${2}':
		${3}
		break;
	${0}
	default:
		${4}
		break;
	}
snippet case
	case '${1}':
		${0}
		break;
#}}}
# try
#{{{
snippet try
	try {
		${0}
	} catch (${1:Exception} $e) {
	} finally {
	}
#}}}
# array
#{{{
snippet array
	$${1} = array(
		'${2}' => ${0},);
#}}}
# phpunit
#{{{
snippet ase
	$this->assertEquals(${1:expected}, ${2:actual});
snippet asne
	$this->assertNotEquals(${1:expected}, ${2:actual});
snippet asf
	$this->assertFalse(${1:Something});
snippet ast
	$this->assertTrue(${1:Something});
snippet asfex
	$this->assertFileExists(${1:path/to/file});
snippet asfnex
	$this->assertFileNotExists(${1:path/to/file});
snippet ascon
	$this->assertContains(${1:Search Value}, ${2:Array or Iterator});
snippet ashk
	$this->assertArrayHasKey(${1:key}, ${2:array});
snippet asnhk
	this->assertArrayNotHasKey(${1:value}, ${2:array});
snippet ascha
	$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');
snippet asi
	$this->assertInstanceOf(${1:expected}, ${2:actual});
snippet tc
	public function test${1:name_of_the_test}() //{{{
	{
		${0:code}
	} //}}}
#}}}
