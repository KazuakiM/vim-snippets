# vim:set fdm=marker:
priority -50
# Debug message
#{{{
snippet log "Echo debug helper in console"
	echo('['.__class__.':'.__function__.':'.__line__.']${1}:'.${0:$1}"\n");
endsnippet
snippet logBr "Echo debug helper in HTML"
	echo('['.__class__.':'.__function__.':'.__line__.']${1}:'.${0:$1}"<br />");
endsnippet
snippet logFile "logfile output debug helper"
	file_put_contents('/tmp/sniplog', '<'.date(Y-m-d h:i:s).'>['.__class__.':'.__function__.':'.__line__.']${1}:'.${0:$1}"\n",FILE_APPEND|LOCK_EX);
endsnippet
snippet pd "Dumb debug helper in HTML"
	echo('<pre>');var_dump($${0});echo('</pre>');
endsnippet
snippet pdd "Exit Dumb debug helper in HTML"
	echo('<pre>');var_dump($${0});echo('</pre>');exit(0);
endsnippet
snippet vd "dumb debug helper"
	var_dump($${0});
endsnippet
snippet vdd "Exit dumb debug helper"
	var_dump($${0});exit(0);
endsnippet
#}}}
# Reserved word
#{{{
snippet C "Env valiable COOKIE"
	$_COOKIE['${0}']
endsnippet
snippet E "Env valiable ENV"
	$_ENV['${0}']
endsnippet
snippet F "Env valiable FILES"
	$_FILES['${0}']
endsnippet
snippet G "Env valiable GET"
	$_GET['${0}']
endsnippet
snippet P "Env valiable POST"
	$_POST['${0}']
endsnippet
snippet R "Env valiable REQUEST"
	$_REQUEST['${0}']
endsnippet
snippet S "Env valiable SERVER"
	$_SERVER['${0}']
endsnippet
snippet SS "Env valiable SESSION"
	$_SESSION['${0}']
endsnippet
#}}}
# Method
#{{{
snippet inc "include"
	include('${0}');
endsnippet
snippet inc1 "include_once"
	include_once('${0}');
endsnippet
snippet req "require"
	require('${0}');
endsnippet
snippet req1 "require_once"
	require_once('${0}');
endsnippet
snippet def "define"
	define('${1}', ${0});
endsnippet
#}}}
# Start Docblock
#{{{
snippet /* "Start Docblock"
	/**
	 * ${0}
	 */
endsnippet
#}}}
# Visibility
#{{{
snippet public "Public Visibility"
	public ${1:static} ${0}
endsnippet
snippet protected "Protected Visibility"
	protected ${1:static} ${0}
endsnippet
snippet private "Private Visibility"
	private ${1:static} ${0}
endsnippet
#}}}
# Class
#{{{
snippet class "Class default"
	/**
	 * ${1}
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		// Class valiable
		//{{{
		${3}
		//}}}
		/**
		 * ${4}
		 */
		public function __construct(${5}) //{{{
		{
			${0}
		} //}}}
	}
endsnippet
#}}}
# Function
#{{{
snippet function_public "Function Public"
	/**
	 * ${1}
	 */
	public ${2:static }function ${3}(${4}) //{{{
	{
		${0}
	} //}}}
endsnippet
snippet function_protected "Function Protected"
	/**
	 * ${1}
	 */
	protected ${2:static }function ${3}(${4}) //{{{
	{
		${0}
	} //}}}
endsnippet
snippet function_private "Function Private"
	/**
	 * ${1}
	 */
	private ${2:static }function _${3}(${4}) //{{{
	{
		${0}
	} //}}}
endsnippet
snippet setter "Setter"
	public function set${1/\w+\s*/\u$0/}($$1) { $this->_$1 = $$1; }
	${0}
endsnippet
snippet getter "Getter"
	public function get${1/\w+\s*/\u$0/}() { return $this->_$1; }
	${0}
endsnippet
snippet sgetter "Setter and Getter"
	public function set${1/\w+\s*/\u$0/}($$1) { $this->_$1 = $$1; }
	public function get${1/\w+\s*/\u$0/}() { return $this->$1; }
	${0}
endsnippet
#}}}
# PHP tags
#{{{
snippet <? "PHP tags"
	<?php

	${0}
endsnippet
snippet <?= "PHP short tags"
	<?= ${0} ?>
endsnippet
#}}}
# foreach
#{{{
snippet foreach "foreach array as value"
	foreach ($${1} as $${2}) {
		${0}
	}
endsnippet
snippet foreachk "foreach array as key => value"
	foreach ($${1} as $${2:key} => $${3}) {
		${0}
	}
endsnippet
#}}}
# for
#{{{
snippet for "for"
	for ($${1} = 0; $$1 < ${2}; $$1${3:++}) {
		${0}
	}
endsnippet
#}}}
# while
#{{{
snippet while "while"
	while (${1}) {
		${0}
	}
endsnippet
#}}}
# if
#{{{
snippet if "if"
	if (${1}) {
		${0}
	}
endsnippet
snippet else "else"
	else {
		${0}
	}
endsnippet
snippet elseif "elseif"
	elseif (${1}) {
		${0}
	}
endsnippet
#}}}
# switch
#{{{
snippet switch "switch"
	switch ($${1}) {
	case '${2}':
		${3}
		break;
	${0}
	default:
		${4}
		break;
	}
endsnippet
snippet case "switch - case"
	case '${1}':
		${0}
		break;
endsnippet
#}}}
# try
#{{{
snippet try "try"
	try {
		${0}
	} catch (${1:Exception} $e) {
	} finally {
	}
endsnippet
#}}}
# array
#{{{
snippet array "array"
	$${1} = array(
		'${2}' => ${0},);
endsnippet
#}}}

