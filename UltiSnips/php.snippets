# vim:set fdm=marker:
priority -50
# Debug message
#{{{
snippet log "Echo debug helper in console"
echo('['.__class__.':'.__function__.':'.__line__.']${1}:'.${0:$1}"\n");
endsnippet
snippet logBr "Echo debug helper in HTML"
echo('['.__class__.':'.__function__.':'.__line__.']${1}:'.${0:$1}"<br />");
endsnippet
snippet logFile "logfile output debug helper"
file_put_contents('/tmp/sniplog', '<'.date(Y-m-d h:i:s).'>['.__class__.':'.__function__.':'.__line__.']${1}:'.${0:$1}"\n",FILE_APPEND|LOCK_EX);
endsnippet
snippet pd "Dumb debug helper in HTML"
echo('<pre>');var_dump($${0:valiable});echo('</pre>');
endsnippet
snippet pdd "Exit Dumb debug helper in HTML"
echo('<pre>');var_dump($${0:valiable});echo('</pre>');exit(0);
endsnippet
snippet vd "dumb debug helper"
var_dump($${0:valiable});
endsnippet
snippet vdd "Exit dumb debug helper"
var_dump($${0:valiable});exit(0);
endsnippet
#}}}
# Reserved word
#{{{
snippet C "Env valiable COOKIE"
$_COOKIE['${0:key}']
endsnippet
snippet E "Env valiable ENV"
$_ENV['${0:key}']
endsnippet
snippet F "Env valiable FILES"
$_FILES['${0:key}']
endsnippet
snippet G "Env valiable GET"
$_GET['${0:key}']
endsnippet
snippet P "Env valiable POST"
$_POST['${0:key}']
endsnippet
snippet R "Env valiable REQUEST"
$_REQUEST['${0:key}']
endsnippet
snippet S "Env valiable SERVER"
$_SERVER['${0:key}']
endsnippet
snippet SS "Env valiable SESSION"
$_SESSION['${0:key}']
endsnippet
#}}}
# Method
#{{{
snippet inc "include"
include('${0:file}');
endsnippet
snippet inc1 "include_once"
include_once('${0:file}');
endsnippet
snippet req "require"
require('${0:file}');
endsnippet
snippet req1 "require_once"
require_once('${0:file}');
endsnippet
snippet def "define"
define('${1:valiable}', ${0:value});
endsnippet
#}}}
# Start Docblock
#{{{
snippet /* "Start Docblock"
/**
 * ${0:document}
 */
endsnippet
#}}}
# Visibility
#{{{
snippet public "Public Visibility"
public ${1:static} ${0}
endsnippet
snippet protected "Protected Visibility"
protected ${1:static} ${0}
endsnippet
snippet private "Private Visibility"
private ${1:static} ${0}
endsnippet
#}}}
# Class
#{{{
snippet class "Class default"
<?php
class ${1:`!v vim_snippets#Filename()`}
{
	//Class valiable {{{
	${2:private}
	//}}}
	public function __construct(${3}) //{{{
	{
		${0://code...}
	} //}}}
}
endsnippet
snippet class_valiable "Class valiable"
//Class valiable {{{
${1:private}
//}}}
endsnippet
#}}}
# Function
#{{{
snippet function_public "Function Public"
/**
 * $2
 */
public ${1:static }function ${2}(${3}) //{{{
{
	${0://code...}
} //}}}
endsnippet
snippet function_protected "Function Protected"
/**
 * $2
 */
protected ${1:static }function ${2}(${3}) //{{{
{
	${0://code...}
} //}}}
endsnippet
snippet function_private "Function Private"
/**
 * $2
 */
private ${1:static }function _${2}(${3}) //{{{
{
	${0://code...}
} //}}}
endsnippet
snippet construct "__construct"
	/**
	 * __construct
	 */
	public function __construct(${1}) //{{{
	{
		${0://code...}
	} //}}}
endsnippet
snippet setter "Setter"
public function set${1/\w+\s*/\u$0/}($$1) { $this->_$1 = $$1; }
endsnippet
snippet getter "Getter"
public function get${1/\w+\s*/\u$0/}() { return $this->_$1; }
endsnippet
snippet sgetter "Setter and Getter"
public function set${1/\w+\s*/\u$0/}($$1) { $this->_$1 = $$1; }
public function get${1/\w+\s*/\u$0/}() { return $this->_$1; }
endsnippet
snippet gsetter "Setter and Getter"
public function set${1/\w+\s*/\u$0/}($$1) { $this->_$1 = $$1; }
public function get${1/\w+\s*/\u$0/}() { return $this->_$1; }
endsnippet
#}}}
# foreach
#{{{
snippet foreach "foreach array as value"
foreach ($${1:variable} as $${2:value}) {
	${0://code...}
}
endsnippet
snippet foreachk "foreach array as key => value"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${0://code...}
}
endsnippet
#}}}
# for
#{{{
snippet for "for"
for ($${1:index} = 0; $$1 < ${2}; $$1${3:++}) {
	${0://code...}
}
endsnippet
#}}}
# while
#{{{
snippet while "while"
while (${1:/* condition */}) {
	${0://code...}
}
endsnippet
#}}}
# if
#{{{
snippet if "if"
if (${1:/* condition */}) {
	${0://code...}
}
endsnippet
snippet else "else"
else {
	${0://code...}
}
endsnippet
snippet elseif "elseif"
elseif (${1:/* condition */}) {
	${0://code...}
}
endsnippet
#}}}
# switch
#{{{
snippet switch "switch"
switch ($${1:valiable}) {
case '${2:/* condition */}':
	${0://code...}
	break;
default:
	break;
}
endsnippet
snippet case "switch - case"
case '${1:/* condition */}':
	${0://code...}
	break;
endsnippet
#}}}
# try
#{{{
snippet try "try"
try {
	${0://code...}
} catch (Exception $e) {
	$e->getMessage()
} finally {
}
endsnippet
#}}}
# array
#{{{
snippet array "array"
$${1:valiable} = array(
	'${2:key}' => ${0:value},);
endsnippet
#}}}
# SQL
#{{{
snippet sql "SQL"
<<<SQL
${1:sql}
SQL;
endsnippet
snippet select "SELECT"
SELECT ${1:colmn}
endsnippet
snippet from "FROM"
 FROM ${1:table} ${2:abbreviation}
 ${3:condition}
endsnippet
snippet from-inner "FROM INNER JOIN"
 FROM ${1:table} ${2:abbreviation}
 INNER JOIN ${3:table} ${4:abbreviation}
 ON $2.${5:condition} = $4.${6:condition}
endsnippet
snippet from-left "FROM LEFT JOIN"
 FROM ${1:table} ${2:abbreviation}
 LEFT JOIN ${3:table} ${4:abbreviation}
 ON $2.${5:condition} = $4.${6:condition}
endsnippet
snippet inner "INNER JOIN"
 INNER JOIN ${1:table} ${2:abbreviation}
 ON ${3:condition}
endsnippet
snippet left "LEFT JOIN"
 LEFT JOIN ${1:table} ${2:abbreviation}
 ON ${3:condition}
endsnippet
snippet where "WHERE"
 WHERE ${1:condition}
endsnippet
snippet and "AND"
 AND ${1:condition}
endsnippet
snippet or "OR"
 OR ${1:condition}
endsnippet
snippet group-by "GROUP BY"
 GROUP BY ${1:condition}
endsnippet
snippet limit "LIMIT"
 LIMIT ${1:condition}
endsnippet
snippet insert-into "INSERT INTO"
INSERT INTO ${1:table} ${2:(condition)}
endsnippet
snippet values "VALUES"
 VALUES ${1:(condition)}
endsnippet
snippet duplicate "DUPLICATE"
 ON DUPLICATE KEY UPDATE ${1:condition}
endsnippet
snippet update "UPDATE SET"
UPDATE ${1:table} SET ${2:condition}
endsnippet
snippet update-inner "UPDATE INNER JOIN SET"
UPDATE ${1:table} ${2:abbreviation}
 INNER JOIN ${3:table ${4:abbreviation}
 ON $2.${5:colmn} = $4.${6:colmn}
 SET ${7:condition}
endsnippet
snippet delete "DELETE"
DELETE FROM ${1:table} ${2:abbreviation}
 WHERE ${3:condition}
endsnippet
snippet delete-inner "DELETE INNER JOIN"
DELETE ${1:table} FROM $1 ${2:abbreviation}
 INNER JOIN ${3:table} ${4:abbreviation}
 ON $2.${5:colmn} = $4.${6:colmn}
 WHERE ${7:condition}
endsnippet
#}}}
