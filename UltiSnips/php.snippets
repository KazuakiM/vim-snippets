# Debug message {{{
snippet log "Echo debug helper in console"
echo('['. __class__ .':'. __function__ .':'. __line__ .']${1}:'. print_r($${0:$1}, true) ."\n");
endsnippet
snippet logg "Exit Echo debug helper in console"
echo('['. __class__ .':'. __function__ .':'. __line__ .']${1}:'. print_r($${0:$1}, true) ."\n"); exit(9);
endsnippet
snippet logmsg "Log template"
'['. __class__ .':'. __function__ .':'. __line__ .']:'
endsnippet
snippet logbr "Echo debug helper in HTML"
echo('['. __class__ .':'. __function__ .':'. __line__ ..']${1}:'. print_r($${0}, true) .'<br />');
endsnippet
snippet logfile "Output logfile debug helper"
file_put_contents('/tmp/sniplog', '<'. date('Y-m-d H:i:s') .'>['. __class__ .':'. __function__ .':'. __line__ .']${1}:'. print_r($${0:$1}, true) ."\n", FILE_APPEND|LOCK_EX);
endsnippet
snippet pd "Dump debug helper in HTML"
echo('<pre>');var_dump($${0:variable});echo('</pre>');
endsnippet
snippet pdd "Exit Dump debug helper in HTML"
echo('<pre>');var_dump($${0:variable});echo('</pre>');exit(9);
endsnippet
snippet vd "dump debug helper"
var_dump($${0:variable});
endsnippet
snippet vdd "Exit dump debug helper"
var_dump($${0:variable});exit(9);
endsnippet
#}}}
# Reserved word {{{
snippet C "Env variable COOKIE"
$_COOKIE['${0:key}']
endsnippet
snippet E "Env variable ENV"
$_ENV['${0:key}']
endsnippet
snippet F "Env variable FILES"
$_FILES['${0:key}']
endsnippet
snippet G "Env variable GET"
$_GET['${0:key}']
endsnippet
snippet P "Env variable POST"
$_POST['${0:key}']
endsnippet
snippet R "Env variable REQUEST"
$_REQUEST['${0:key}']
endsnippet
snippet S "Env variable SERVER"
$_SERVER['${0:key}']
endsnippet
snippet SS "Env variable SESSION"
$_SESSION['${0:key}']
endsnippet
#}}}
# Language control structures {{{
snippet inc "include"
include '${0:file}';
endsnippet
snippet inc1 "include_once"
include_once '${0:file}';
endsnippet
snippet req "require"
require '${0:file}';
endsnippet
snippet req1 "require_once"
require_once '${0:file}';
endsnippet
snippet def "define"
define('${1:variable}', ${0:value});
endsnippet
#}}}
# Visibility {{{
snippet public "Public Visibility"
public ${1:static }${0}
endsnippet
snippet protected "Protected Visibility"
protected ${1:static }${0}
endsnippet
snippet private "Private Visibility"
private ${1:static }${0}
endsnippet
#}}}
# Class {{{
snippet class "Class default"
<?php
class ${1:`!v vim_snippets#Filename()`}
{
	//Class variable {{{
	//}}}

	public function __construct(${2}) //{{{
	{
		${0:parent::__construct();}
	} //}}}
}
endsnippet
snippet class_variable "Class variable"
//Class variable {{{
//}}}
endsnippet
#}}}
# Function {{{
snippet public_function "Public Function"
public ${1:static }function ${2}(${3}) //{{{
{
	${0://code...}
} //}}}
endsnippet
snippet protected_function "Protected Function"
protected ${1:static }function ${2}(${3}) //{{{
{
	${0://code...}
} //}}}
endsnippet
snippet private_function "Private Function"
private ${1:static }function _${2}(${3}) //{{{
{
	${0://code...}
} //}}}
endsnippet
snippet construct "__construct"
	public function __construct(${1}) //{{{
	{
		${0:parent::__construct();}
	} //}}}
endsnippet
snippet setter "Setter"
public function set${1/\w+\s*/\u$0/}($$1) //{{{
{
	$this->_$1 = $$1;
} //}}}
endsnippet
snippet getter "Getter"
public function get${1/\w+\s*/\u$0/}() //{{{
{
	return $this->_$1;
} //}}}
endsnippet
snippet sgetter "Setter and Getter"
public function set${1/\w+\s*/\u$0/}($$1) //{{{
{
	$this->_$1 = $$1;
} //}}}
public function get${1/\w+\s*/\u$0/}() //{{{
{
	return $this->_$1;
} //}}}
endsnippet
snippet gsetter "Setter and Getter"
public function set${1/\w+\s*/\u$0/}($$1) //{{{
{
	$this->_$1 = $$1;
} //}}}
public function get${1/\w+\s*/\u$0/}() //{{{
{
	return $this->_$1;
} //}}}
endsnippet
#}}}
# foreach {{{
snippet foreach "foreach array as value"
foreach ($${1:array} as $${2:value}) {
	${0://code...}
}
endsnippet
snippet foreachk "foreach array as key => value"
foreach ($${1:array} as $${2:key} => $${3:value}) {
	${0://code...}
}
endsnippet
#}}}
# for {{{
snippet for "for"
for ($${1:index} = 0; $$1 < ${2}; $$1${3:++}) {
	${0://code...}
}
endsnippet
#}}}
# while {{{
snippet while "while"
while (${1:/* condition */}) {
	${0://code...}
}
endsnippet
#}}}
# if {{{
snippet if "if"
if (${1:/* condition */}) {
	${0://code...}
}
endsnippet
snippet else "else"
else {
	${0://code...}
}
endsnippet
snippet elseif "elseif"
elseif (${1:/* condition */}) {
	${0://code...}
}
endsnippet
#}}}
# switch {{{
snippet switch "switch"
switch ($${1:variable}) {
case '${2:/* condition */}':
	${0://code...}
	break;
default:
	break;
}
endsnippet
snippet case "switch - case"
case '${1:/* condition */}':
	${0://code...}
	break;
endsnippet
#}}}
# try {{{
snippet throw "throw"
	throw new Exception(${0://message...});
endsnippet
snippet try "try"
try {
	${0://code...}
} catch (Exception $e) {
	$e->getMessage()
}
endsnippet
snippet finally "finally"
finally {
}
endsnippet
#}}}
# array {{{
snippet array "array"
$${1:array} = [
	'${2:key}' => ${0:value},];
endsnippet
snippet array_in "array_in"
$${1:array}[] = $${0:variable};
endsnippet
#}}}
# FILE {{{
snippet csv "csv"
$mp = fopen('php://memory', 'bw+');
foreach ($${1:array} as $${2:value}) {
	fputcsv($mp, $$2, ${3:','}, ${4:'"'});
}
rewind($mp);
${0://$buf = str_replace("\n", "\r\n", stream_get_contents($mp));}
$buf = stream_get_contents($mp);
fclose($mp);

$fp = fopen(${5:file}, 'w');
fwrite($fp, $buf);
fclose($fp);
endsnippet
#}}}
# SQL {{{
snippet sql "SQL"
<<<SQL
${0:delete space}
${1:delete space}SQL;
endsnippet
snippet select "SELECT"
SELECT ${1:colmn}
endsnippet
snippet from "FROM"
FROM ${1:table} ${2:abbreviation}
endsnippet
snippet from_inner "FROM INNER JOIN"
FROM ${1:table} ${2:abbreviation}
INNER JOIN ${3:table} ${4:abbreviation}
ON $2.${5:condition} = $4.${6:condition}
endsnippet
snippet from_left "FROM LEFT JOIN"
FROM ${1:table} ${2:abbreviation}
LEFT JOIN ${3:table} ${4:abbreviation}
ON $2.${5:condition} = $4.${6:condition}
endsnippet
snippet inner "INNER JOIN"
INNER JOIN ${1:table} ${2:abbreviation}
ON ${3:condition}
endsnippet
snippet left "LEFT JOIN"
LEFT JOIN ${1:table} ${2:abbreviation}
ON ${3:condition}
endsnippet
snippet where "WHERE"
WHERE ${1:condition}
endsnippet
snippet and "AND"
AND ${1:condition}
endsnippet
snippet or "OR"
OR ${1:condition}
endsnippet
snippet group_by "GROUP BY"
GROUP BY ${1:condition}
endsnippet
snippet group_concat "GROUP_CONCAT"
GROUP_CONCAT(${1:DISTINCT }${2:colmn,colmn} ${3:ORDER BY} ${4:SEPARATOR})
GROUP BY ${5:condition}
endsnippet
snippet limit "LIMIT"
LIMIT ${1:condition}
endsnippet
snippet insert_into "INSERT INTO"
INSERT INTO ${1:table} ${2:abbreviation} (${3:condition})
endsnippet
snippet insert_into_select "INSERT INTO SELECT"
INSERT INTO ${1:table} ${2:abbreviation} (${3:condition})
	SELECT ${4:condition}
endsnippet
snippet values "VALUES"
VALUES (${1:condition})
endsnippet
snippet duplicate "DUPLICATE"
	ON DUPLICATE KEY UPDATE ${1:condition}
endsnippet
snippet update "UPDATE SET"
UPDATE ${1:table} ${2:abbreviation} SET $2.${3:condition}
endsnippet
snippet update_inner "UPDATE INNER JOIN SET"
UPDATE ${1:table} ${2:abbreviation}
	INNER JOIN ${3:table} ${4:abbreviation}
	ON $2.${5:colmn} = $4.${6:colmn}
	SET ${7:condition}
endsnippet
snippet delete "DELETE"
DELETE FROM ${1:table}
	WHERE ${2:condition}
endsnippet
snippet delete_inner "DELETE INNER JOIN"
DELETE ${1:table} FROM $1 ${2:abbreviation}
	INNER JOIN ${3:table} ${4:abbreviation}
	ON $2.${5:colmn} = $4.${6:colmn}
	WHERE ${7:condition}
endsnippet
#}}}
# vim:fdl=0
